# Generated by Django 5.2.5 on 2025-09-15 16:58

from django.db import migrations


def normalize_student_tags(apps, schema_editor):
    """
    Normalize existing student tags to lowercase and merge duplicates
    """
    StudentTag = apps.get_model('students', 'StudentTag')

    # Get all tags
    all_tags = StudentTag.objects.all()

    # Track tags to merge
    tag_groups = {}  # lowercase_name -> [tag objects]

    # Group tags by lowercase name
    for tag in all_tags:
        original_name = tag.name
        lowercase_name = original_name.lower().strip()

        if lowercase_name not in tag_groups:
            tag_groups[lowercase_name] = []
        tag_groups[lowercase_name].append(tag)

    # Process each group
    for lowercase_name, tags in tag_groups.items():
        if len(tags) == 1:
            # Single tag - just normalize the name
            tag = tags[0]
            if tag.name != lowercase_name:
                tag.name = lowercase_name
                tag.save()
        else:
            # Multiple tags with same lowercase name - merge them
            print(f"Merging {len(tags)} duplicate tags: {[tag.name for tag in tags]}")

            # Choose the primary tag (keep the one with most students, or first created)
            primary_tag = None
            max_students = -1

            for tag in tags:
                student_count = tag.students.count()
                if student_count > max_students or primary_tag is None:
                    max_students = student_count
                    primary_tag = tag

            # Normalize primary tag name
            primary_tag.name = lowercase_name
            primary_tag.save()

            # Move all students from other tags to primary tag
            for tag in tags:
                if tag.id != primary_tag.id:
                    # Transfer students
                    for student in tag.students.all():
                        # Add to primary tag if not already there
                        if not primary_tag.students.filter(id=student.id).exists():
                            primary_tag.students.add(student)

                    # Delete the duplicate tag
                    tag.delete()

    print(f"Tag normalization completed. Processed {len(tag_groups)} unique tag names.")


def reverse_normalize_student_tags(apps, schema_editor):
    """
    This migration cannot be easily reversed as we lose information
    about original case variations when merging duplicates.
    """
    print("Warning: This migration cannot be automatically reversed.")
    print("Original tag name cases and duplicate information has been lost.")


class Migration(migrations.Migration):

    dependencies = [
        ('students', '0009_auto_20250910_0057'),
    ]

    operations = [
        migrations.RunPython(
            normalize_student_tags,
            reverse_normalize_student_tags,
        ),
    ]
